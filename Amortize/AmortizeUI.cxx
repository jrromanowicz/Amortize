// generated by Fast Light User Interface Designer (fluid) version 1.0108

#include "AmortizeUI.h"
#include <FL/fl_ask.h>
#include <ctime>
#include <exception>

void AmortizeUI::cb_Principal_i(Fl_Float_Input* o, void*) {
  principalAmount = atof(o->value());
}
void AmortizeUI::cb_Principal(Fl_Float_Input* o, void* v) {
  ((AmortizeUI*)(o->parent()->user_data()))->cb_Principal_i(o,v);
}

void AmortizeUI::cb_Interest_i(Fl_Float_Input* o, void*) {
  interestRate = atof(o->value());
}
void AmortizeUI::cb_Interest(Fl_Float_Input* o, void* v) {
  ((AmortizeUI*)(o->parent()->user_data()))->cb_Interest_i(o,v);
}

void AmortizeUI::cb_menuButton_i(Fl_Menu_Button* o, void*) {
  paymentPeriod = (LoanData::PaymentPeriod)(o->value()) ;
  menuButton->label((menuButton->menu())[paymentPeriod].text) ;
}
void AmortizeUI::cb_menuButton(Fl_Menu_Button* o, void* v) {
  ((AmortizeUI*)(o->parent()->user_data()))->cb_menuButton_i(o,v);
}

Fl_Menu_Item AmortizeUI::menu_menuButton[] = {
 {"", 0,  0, 0, 1, FL_NO_LABEL, 0, 14, 0},
 {"Pay Bi-weekly", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Pay Semi-monthly", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Pay Monthly", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Pay Quarterly", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Pay Semi-Annually", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Pay Annually", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void AmortizeUI::cb_Installment_i(Fl_Round_Button*, void*) {
  loanType = LoanData::InstallmentLoan ;
  revolveGroup->hide() ;
  installmentGroup->show() ;
}
void AmortizeUI::cb_Installment(Fl_Round_Button* o, void* v) {
  ((AmortizeUI*)(o->parent()->parent()->user_data()))->cb_Installment_i(o,v);
}

void AmortizeUI::cb_Revolving_i(Fl_Round_Button*, void*) {
  loanType = LoanData::RevolvingChargeLoan ;
  installmentGroup->hide() ;
  revolveGroup->show() ;
}
void AmortizeUI::cb_Revolving(Fl_Round_Button* o, void* v) {
  ((AmortizeUI*)(o->parent()->parent()->user_data()))->cb_Revolving_i(o,v);
}

void AmortizeUI::cb_Number_i(Fl_Int_Input* o, void*) {
  numPayments = atoi(o->value()) ;
}
void AmortizeUI::cb_Number(Fl_Int_Input* o, void* v) {
  ((AmortizeUI*)(o->parent()->parent()->user_data()))->cb_Number_i(o,v);
}

void AmortizeUI::cb_Fixed_i(Fl_Round_Button*, void*) {
  loanType = LoanData::FixedPaymentLoan ;
  pctPayment->hide() ;
  minPayment->hide() ;
  fixedPay->show() ;
}
void AmortizeUI::cb_Fixed(Fl_Round_Button* o, void* v) {
  ((AmortizeUI*)(o->parent()->parent()->user_data()))->cb_Fixed_i(o,v);
}

void AmortizeUI::cb_Percentage_i(Fl_Round_Button*, void*) {
  loanType = LoanData::PercentPaymentLoan ;
  fixedPay->hide() ;
  pctPayment->show() ;
  minPayment->show() ;
}
void AmortizeUI::cb_Percentage(Fl_Round_Button* o, void* v) {
  ((AmortizeUI*)(o->parent()->parent()->user_data()))->cb_Percentage_i(o,v);
}

void AmortizeUI::cb_fixedPay_i(Fl_Float_Input* o, void*) {
  fixedPayment = atof(o->value()) ;
}
void AmortizeUI::cb_fixedPay(Fl_Float_Input* o, void* v) {
  ((AmortizeUI*)(o->parent()->parent()->user_data()))->cb_fixedPay_i(o,v);
}

void AmortizeUI::cb_pctPayment_i(Fl_Float_Input* o, void*) {
  percentPayment = atof(o->value());
}
void AmortizeUI::cb_pctPayment(Fl_Float_Input* o, void* v) {
  ((AmortizeUI*)(o->parent()->parent()->user_data()))->cb_pctPayment_i(o,v);
}

void AmortizeUI::cb_minPayment_i(Fl_Float_Input* o, void*) {
  minimumPayment = atof(o->value());
}
void AmortizeUI::cb_minPayment(Fl_Float_Input* o, void* v) {
  ((AmortizeUI*)(o->parent()->parent()->user_data()))->cb_minPayment_i(o,v);
}

void AmortizeUI::cb_Amortize(Fl_Button* o, void* v) {
  ((AmortizeUI*)v)->doAmortization();
}
// listen for an enter key event
int AmortizeUI::handle(int event) {
  if (FL_KEYBOARD == event && Fl::event_key(FL_Enter)) {
    Fl_Group::handle(event); // capture any user interaction first
    doAmortization();
    return 1; // we ate the event
  }
  return Fl_Group::handle(event); // not interested, pass the event up the chain
}

AmortizeUI::AmortizeUI(const char * title) : Fl_Window(340, 520, title)
{
  principalAmount = interestRate = fixedPayment = percentPayment
      = minimumPayment = numPayments = 0;
  paymentPeriod = LoanData::InvalidPeriod;
  loanType = LoanData::InvalidLoan;
  loan = NULL;

  box(FL_FLAT_BOX);
  color(FL_BACKGROUND_COLOR);
  selection_color(FL_BACKGROUND_COLOR);
  labeltype(FL_NO_LABEL);
  labelfont(0);
  labelsize(14);
  labelcolor(FL_FOREGROUND_COLOR);
  user_data((void*)(this));
  align(FL_ALIGN_TOP);
  when(FL_WHEN_RELEASE);
    { results = new Fl_Text_Display(5, 325, 330, 190);
      results->labelfont(4);
      results->labelcolor((Fl_Color)176);
      results->textfont(4);
      results->align(FL_ALIGN_TOP_LEFT);
      results->wrap_mode(1, 40) ; //word wrap on
      results->buffer(resultText) ;
    } // Fl_Text_Display* results
    { Fl_Float_Input* o = new Fl_Float_Input(125, 25, 85, 20, "Principal Amount $");
      o->tooltip("The amount of the loan (e.g. 100000 or 786.45)");
      o->callback((Fl_Callback*)cb_Principal);
      o->when(FL_WHEN_CHANGED);
      o->take_focus();
    } // Fl_Float_Input* o
    { Fl_Float_Input* o = new Fl_Float_Input(125, 50, 50, 20, "Interest rate");
      o->tooltip("The annual interest percentage (e.g. 8.5)");
      o->callback((Fl_Callback*)cb_Interest);
      o->when(FL_WHEN_CHANGED);
    } // Fl_Float_Input* o
    { menuButton = new Fl_Menu_Button(15, 80, 165, 25, "Payment Period");
      menuButton->tooltip("Choose how often a payment is made");
      menuButton->when(FL_WHEN_CHANGED);
      menuButton->callback((Fl_Callback*)cb_menuButton);
      menuButton->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      menuButton->menu(menu_menuButton);
    } // Fl_Menu_Button* menuButton
    { Fl_Group* o = new Fl_Group(5, 125, 150, 40, "Choose the loan type");
      o->labelcolor((Fl_Color)4);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Round_Button* o = new Fl_Round_Button(15, 125, 120, 20, "Installment Loan");
        o->tooltip("A loan with a fixed payment and fixed payoff date\ne.g. a mortgage");
        o->type(FL_RADIO_BUTTON);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Installment);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(15, 145, 135, 20, "Revolving Charge");
        o->tooltip("A loan paid on until it\'s fully paid\ne.g. a credit card balance");
        o->type(FL_RADIO_BUTTON);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Revolving);
      } // Fl_Round_Button* o
      o->end();
    } // Fl_Group* o
    { installmentGroup = new Fl_Group(5, 170, 190, 25);
      installmentGroup->hide();
      { Fl_Int_Input* o = new Fl_Int_Input(140, 170, 50, 20, "Number of Payments");
        o->tooltip("The number of payments to pay off the loan");
        o->callback((Fl_Callback*)cb_Number);
        o->when(FL_WHEN_CHANGED);
      } // Fl_Float_Input* o
      installmentGroup->end();
    } // Fl_Group* installmentGroup
    { revolveGroup = new Fl_Group(5, 195, 195, 90, "Select the payment type");
      revolveGroup->labelcolor((Fl_Color)4);
      revolveGroup->align(FL_ALIGN_TOP_LEFT);
      revolveGroup->hide();
      { Fl_Round_Button* o = new Fl_Round_Button(20, 195, 115, 20, "Fixed Payment");
        o->tooltip("Pay a fixed dollar amount each period");
        o->type(FL_RADIO_BUTTON);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Fixed);
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(20, 215, 115, 20, "Percentage");
        o->tooltip("Pay a percentage of the remaining balance each period");
        o->type(FL_RADIO_BUTTON);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)cb_Percentage);
      } // Fl_Round_Button* o
      { fixedPay = new Fl_Float_Input(115, 240, 60, 20, "Fixed Payment $");
        fixedPay->tooltip("Fixed dollar amount of each payment");
        fixedPay->callback((Fl_Callback*)cb_fixedPay);
        fixedPay->when(FL_WHEN_CHANGED);
        fixedPay->hide();
      } // Fl_Float_Input* fixedPay
      { pctPayment = new Fl_Float_Input(140, 240, 60, 20, "Payment Percentage");
        pctPayment->tooltip("Percentage of balance to pay each period");
        pctPayment->callback((Fl_Callback*)cb_pctPayment);
        pctPayment->when(FL_WHEN_CHANGED);
        pctPayment->hide();
      } // Fl_Float_Input* pctPayment
      { minPayment = new Fl_Float_Input(140, 260, 60, 20, "Minimum Payment $");
        minPayment->tooltip("Minimum dollar amount to pay each period");
        minPayment->callback((Fl_Callback*)cb_minPayment);
        minPayment->when(FL_WHEN_CHANGED);
        minPayment->hide();
      } // Fl_Float_Input* minPayment
      revolveGroup->end();
    } // Fl_Group* revolveGroup
    { Fl_Button* o = new Fl_Button(35, 290, 70, 25, "Amortize");
      o->tooltip("Calculate the amortization");
      o->labelfont(1);
      o->labelcolor((Fl_Color)4);
      o->callback((Fl_Callback*)cb_Amortize, (void*)(this));
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
    } // Fl_Button* o
    end();
} // AmortizeUI ctor

void AmortizeUI::doAmortization(void) {
  time_t now = time(NULL);
  try {
    LoanData thisLoan(principalAmount, interestRate, paymentPeriod, loanType,
        fixedPayment, percentPayment, minimumPayment, numPayments, now);
    setText("Parameters validated");
    new Amortize(thisLoan);
    setText("");
  } catch (std::exception &e) {
    setText(e.what()); // show errors
  } // catch parameter & amortization error(s)
} // doAmortization()

double AmortizeUI::getPrincipalAmount(void) {
  return principalAmount ;
}

double AmortizeUI::getInterestRate(void) {
  return interestRate ;
}

int AmortizeUI::getNumPayments(void) {
  return numPayments ;
}

double AmortizeUI::getFixedPayment(void) {
  return fixedPayment ;
}

double AmortizeUI::getPercentPayment(void) {
  return percentPayment ;
}

double AmortizeUI::getMinimumPayment(void) {
  return minimumPayment ;
}

void AmortizeUI::setText(std::string text) {
  resultText.text(text.c_str()) ;
}

void AmortizeUI::addText(std::string text) {
  resultText.append(text.c_str()) ;
}

char * AmortizeUI::getText(void) {
  return resultText.text() ;
}
