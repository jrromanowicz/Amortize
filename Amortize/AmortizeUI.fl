# data file for the Fltk User Interface Designer (fluid)
version 1.0108 
header_name {.h} 
code_name {.cxx}
class AmortizeUI {open
} {
  decl {enum PaymentPeriod {InvalidPeriod = 0, BiWeeklyPeriod, SemiMonthlyPeriod, MonthlyPeriod, QuarterlyPeriod, SemiAnnualPeriod, AnnualPeriod} ;} {public
  }
  decl {enum LoanType {InvalidLoan = 0, InstallmentLoan, RevolvingChargeLoan, FixedPaymentLoan, PercentPaymentLoan } ;} {public
  }
  Function {AmortizeUI(void (*doAmortize)(AmortizeUI *), void(*saveFunc)(AmortizeUI *))} {open
  } {
    Fl_Window mainWindow {
      label Amortize open
      xywh {-691 60 658 520} type Single
      class Fl_Window visible
    } {
      Fl_Text_Display results {
        private xywh {5 325 225 190} labelfont 4 labelcolor 176 align 5 textfont 4
        code0 {\#include <string>}
        code1 {\#include <Fl_Window.H>}
        code2 {results->wrap_mode(1, 26) ; //word wrap on}
        code3 {results->buffer(resultText) ;}
      }
      Fl_Group amortizeTable {
        private xywh {235 26 415 490} hide
        code0 {\#include "AmortizeTable.h"}
        class AmortizeTable
      } {}
      Fl_Input {} {
        label {Principal Amount $}
        callback {principalAmount = atof(o->value());}
        private tooltip {The amount of the loan (e.g. 100000 or 786.45)} xywh {125 25 85 20} type Float
        code0 {\#include <stdlib.h>}
      }
      Fl_Input {} {
        label {Interest rate}
        callback {interestRate = atof(o->value());}
        private tooltip {The annual interest percentage (e.g. 8.5)} xywh {125 50 50 20}
        code0 {\#include <stdlib.h>}
      }
      Fl_Menu_Button menuButton {
        label {Payment Period}
        callback {paymentPeriod = (PaymentPeriod)(o->value()) ;
menuButton->label((menuButton->menu())[paymentPeriod].text) ;}
        private tooltip {Choose how often a payment is made} xywh {15 80 165 25} align 20
      } {
        MenuItem {} {
          private xywh {0 0 30 20} labeltype NO_LABEL deactivate
        }
        MenuItem {} {
          label {Pay Bi-weekly}
          private tooltip {Every two weeks} xywh {0 0 130 20}
        }
        MenuItem {} {
          label {Pay Semi-monthly}
          private tooltip {Twice a month} xywh {0 0 130 20}
        }
        MenuItem {} {
          label {Pay Monthly}
          private tooltip {Once a month} xywh {0 0 130 20}
        }
        MenuItem {} {
          label {Pay Quarterly}
          private tooltip {Four times a year} xywh {0 0 130 20}
        }
        MenuItem {} {
          label {Pay Semi-Annually}
          private tooltip {Twice a year} xywh {0 0 130 20}
        }
        MenuItem {} {
          label {Pay Annually}
          private tooltip {Once a year} xywh {0 0 130 20}
        }
      }
      Fl_Group {} {
        label {Choose the loan type} open
        private xywh {5 125 150 40} labelcolor 4 align 5
      } {
        Fl_Round_Button {} {
          label {Installment Loan}
          callback {loanType = InstallmentLoan ;
revolveGroup->hide() ;
installmentGroup->show() ;}
          private tooltip {A loan with a fixed payment and fixed payoff date} xywh {15 125 120 20} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button {} {
          label {Revolving Charge}
          callback {loanType = RevolvingChargeLoan ;
installmentGroup->hide() ;
revolveGroup->show() ;}
          private tooltip {A loan paid on  until it's paid off
like a credit card loan} xywh {15 145 135 20} type Radio down_box ROUND_DOWN_BOX
        }
      }
      Fl_Group installmentGroup {open
        private xywh {5 170 190 25} hide
      } {
        Fl_Input {} {
          label {Number of Payments}
          callback {numPayments = atoi(o->value()) ;}
          private tooltip {The number of payments to pay off the loan} xywh {140 170 50 20} type Int
        }
      }
      Fl_Group revolveGroup {
        label {Select the payment type} open
        private xywh {5 195 195 90} labelcolor 4 align 5 hide
      } {
        Fl_Round_Button {} {
          label {Fixed Payment}
          callback {loanType = FixedPaymentLoan ;
pctPayment->hide() ;
minPayment->hide() ;
fixedPay->show() ;}
          private tooltip {Pay a fixed dollar amount each period} xywh {20 195 115 20} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Round_Button {} {
          label Percentage
          callback {loanType = PercentPaymentLoan ;
fixedPay->hide() ;
pctPayment->show() ;
minPayment->show() ;}
          private tooltip {Pay a percentage of the  remaining balance each period} xywh {20 215 115 20} type Radio down_box ROUND_DOWN_BOX
        }
        Fl_Input fixedPay {
          label {Fixed Payment $}
          callback {fixedPayment = atof(o->value()) ;}
          private tooltip {Fixed dollar amount of each payment} xywh {115 240 60 20} hide
          code0 {\#include <stdlib.h>}
        }
        Fl_Input pctPayment {
          label {Payment Percentage}
          callback {percentPayment = atof(o->value());}
          private tooltip {Percentage of balance to pay each period} xywh {140 240 60 20} hide
          code0 {\#include <stdlib.h>}
        }
        Fl_Input minPayment {
          label {Minimum Payment $}
          callback {minimumPayment = atof(o->value());}
          private tooltip {Minimum dollar amount to pay each period} xywh {140 260 60 20} hide
          code0 {\#include <stdlib.h>}
        }
      }
      Fl_Button {} {
        label Amortize
        user_data this
        callback {((AmortizeUI *)v)->doAmortization((AmortizeUI*)v) ;}
        tooltip {Perform the amortization} xywh {35 290 70 25} labelfont 1 labelcolor 4 align 16
      }
      Fl_Button saveButton {
        label {Save to CSV}
        user_data this
        callback {((AmortizeUI *)v)->doSave((AmortizeUI*)v) ;} selected
        tooltip {Save amortization as a file you can open in a spreadsheet} xywh {130 290 84 25} hide
      }
      Fl_Group colorButtons {
        xywh {320 4 320 20} hide
        code0 {\#include <FL/fl_show_colormap.H>}
      } {
        Fl_Button Col1Color {
          label {Color...}
          callback {Fl_Color colColor = fl_show_colormap(amortizeTable->columnColor(1)) ;
amortizeTable->columnColor(1, colColor) ;
amortizeTable->redraw() ;}
          private tooltip {Choose a text color for this column} xywh {322 5 50 18}
        }
        Fl_Button Col2Color {
          label {Color...}
          callback {Fl_Color colColor = fl_show_colormap(amortizeTable->columnColor(2)) ;
amortizeTable->columnColor(2, colColor) ;
amortizeTable->redraw() ;}
          private tooltip {Choose a text color for this column} xywh {400 5 50 18}
        }
        Fl_Button Col3Color {
          label {Color...}
          callback {Fl_Color colColor = fl_show_colormap(amortizeTable->columnColor(3)) ;
amortizeTable->columnColor(3, colColor) ;
amortizeTable->redraw() ;}
          private tooltip {Choose a text color for this column} xywh {478 5 50 18}
        }
        Fl_Button Col4Color {
          label {Color...}
          callback {Fl_Color colColor = fl_show_colormap(amortizeTable->columnColor(4)) ;
amortizeTable->columnColor(4, colColor) ;
amortizeTable->redraw() ;}
          private tooltip {Choose a text color for this column} xywh {562 5 50 18}
        }
      }
    }
    code {doAmortization = doAmortize ;} {}
    code {mainWindow->size(658, 520) ;} {}
    code {doSave = saveFunc ;} {}
  }
  Function {getPrincipalAmount(void)} {return_type double
  } {
    code {return principalAmount ;} {}
  }
  Function {getInterestRate(void)} {return_type double
  } {
    code {return interestRate ;} {}
  }
  Function {getPaymentPeriod(void)} {return_type {AmortizeUI::PaymentPeriod}
  } {
    code {return paymentPeriod ;} {}
  }
  Function {getLoanType(void)} {return_type {AmortizeUI::LoanType}
  } {
    code {return loanType ;} {}
  }
  Function {getNumPayments(void)} {return_type int
  } {
    code {return numPayments ;} {}
  }
  Function {getFixedPayment(void)} {return_type double
  } {
    code {return fixedPayment ;} {}
  }
  Function {getPercentPayment(void)} {return_type double
  } {
    code {return percentPayment ;} {}
  }
  Function {getMinimumPayment(void)} {return_type double
  } {
    code {return minimumPayment ;} {}
  }
  Function {setText(std::string text)} {} {
    code {resultText.text(text.c_str()) ;} {}
  }
  Function {addText(std::string text)} {} {
    code {resultText.append(text.c_str()) ;} {}
  }
  Function {getText(void)} {return_type {char *}
  } {
    code {return resultText.text() ;} {}
  }
  Function {getPaymentTable(void)} {return_type {AmortizeTable *}
  } {
    code {return amortizeTable ;} {}
  }
  Function {hideSaveButton()} {return_type void
  } {
    code {saveButton->hide() ;} {}
  }
  Function {showSaveButton()} {return_type void
  } {
    code {saveButton->show() ;} {}
  }
  decl {Fl_Text_Buffer resultText ;} {public
  }
  decl {double principalAmount ;} {}
  decl {double interestRate ;} {}
  decl {PaymentPeriod paymentPeriod ;} {}
  decl {LoanType loanType ;} {}
  decl {double fixedPayment ;} {}
  decl {double percentPayment ;} {}
  decl {double minimumPayment ;} {}
  decl {int numPayments ;} {}
  decl {void (*doAmortization)(AmortizeUI *) ;} {}
  decl {void (*doSave)(AmortizeUI *);} {}
} 
